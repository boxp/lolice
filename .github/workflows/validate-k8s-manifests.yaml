name: Validate Kubernetes Manifests

on:
  pull_request:
    paths:
      - 'argoproj/**'
  push:
    branches: [ main ]
    paths:
      - 'argoproj/**'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup kubeconform
        uses: derailed/kubeconform@v0.6.4

      - name: Setup kustomize
        uses: kubernetes-sigs/kustomize-github-action/v4@v4.3.0

      - name: Setup helm
        uses: helm/helm-install-action@v2.4.0
        with:
          version: '3.14.2'

      - name: Get changed files
        id: changed-files
        run: |
          # PRの場合はPRで変更されたファイルを取得
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            git fetch origin main
            git diff --name-only origin/main..HEAD > changed_files.txt
          else
            # pushの場合は前回のコミットとの差分を取得
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          fi
          cat changed_files.txt

      - name: Identify changed directories
        id: changed-dirs
        run: |
          # 変更されたファイルを含むargoproj配下のディレクトリを特定
          CHANGED_DIRS=$(cat changed_files.txt | grep -E "^argoproj/" | xargs -I{} dirname {} | sort | uniq)
          echo "Changed directories:"
          echo "$CHANGED_DIRS"
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_OUTPUT

      - name: Validate manifests with Kubeconform
        run: |
          # 検証結果を保存するファイル
          VALIDATION_RESULTS="validation_results.md"
          echo "# Kubernetes マニフェスト検証結果" > $VALIDATION_RESULTS
          echo "" >> $VALIDATION_RESULTS
          
          # 変数の初期化
          TOTAL_VALID=0
          TOTAL_INVALID=0
          TOTAL_ERRORS=0
          
          # 各ディレクトリを順に処理
          for DIR in ${{ steps.changed-dirs.outputs.changed_dirs }}; do
            echo "## $DIR の検証" >> $VALIDATION_RESULTS
            echo "" >> $VALIDATION_RESULTS
            
            if [ -f "$DIR/kustomization.yaml" ]; then
              echo "### Kustomize ビルド検証" >> $VALIDATION_RESULTS
              echo "" >> $VALIDATION_RESULTS
              echo "```" >> $VALIDATION_RESULTS
              
              # kustomizeでビルドしてkubeconformで検証
              RESULT=$(kustomize build $DIR 2>&1 | kubeconform \
                -summary \
                -verbose \
                -schema-location default \
                -schema-location "https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json" \
                -output json 2>&1 || true)
              
              echo "$RESULT" >> $VALIDATION_RESULTS
              echo "```" >> $VALIDATION_RESULTS
              
              # 統計を抽出
              VALID=$(echo "$RESULT" | grep -oP 'Valid: \K[0-9]+' || echo "0")
              INVALID=$(echo "$RESULT" | grep -oP 'Invalid: \K[0-9]+' || echo "0")
              ERRORS=$(echo "$RESULT" | grep -oP 'Errors: \K[0-9]+' || echo "0")
              
              TOTAL_VALID=$((TOTAL_VALID + VALID))
              TOTAL_INVALID=$((TOTAL_INVALID + INVALID))
              TOTAL_ERRORS=$((TOTAL_ERRORS + ERRORS))
              
            elif [ -f "$DIR/Chart.yaml" ]; then
              echo "### Helm チャート検証" >> $VALIDATION_RESULTS
              echo "" >> $VALIDATION_RESULTS
              echo "```" >> $VALIDATION_RESULTS
              
              # Helmチャートをlintで検証
              helm lint $DIR >> $VALIDATION_RESULTS 2>&1 || true
              
              echo "```" >> $VALIDATION_RESULTS
              
            else
              echo "### 個別YAMLファイル検証" >> $VALIDATION_RESULTS
              echo "" >> $VALIDATION_RESULTS
              echo "```" >> $VALIDATION_RESULTS
              
              # ディレクトリ内のYAMLファイルを検証
              YAML_FILES=$(find $DIR -name "*.yaml" -o -name "*.yml")
              if [ -n "$YAML_FILES" ]; then
                RESULT=$(echo "$YAML_FILES" | xargs kubeconform \
                  -summary \
                  -verbose \
                  -schema-location default \
                  -schema-location "https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json" \
                  -output json 2>&1 || true)
                
                echo "$RESULT" >> $VALIDATION_RESULTS
                
                # 統計を抽出
                VALID=$(echo "$RESULT" | grep -oP 'Valid: \K[0-9]+' || echo "0")
                INVALID=$(echo "$RESULT" | grep -oP 'Invalid: \K[0-9]+' || echo "0")
                ERRORS=$(echo "$RESULT" | grep -oP 'Errors: \K[0-9]+' || echo "0")
                
                TOTAL_VALID=$((TOTAL_VALID + VALID))
                TOTAL_INVALID=$((TOTAL_INVALID + INVALID))
                TOTAL_ERRORS=$((TOTAL_ERRORS + ERRORS))
              else
                echo "YAMLファイルが見つかりませんでした。" >> $VALIDATION_RESULTS
              fi
              
              echo "```" >> $VALIDATION_RESULTS
            fi
            
            echo "" >> $VALIDATION_RESULTS
          done
          
          # 全体の集計を追加
          echo "## 検証結果サマリー" >> $VALIDATION_RESULTS
          echo "" >> $VALIDATION_RESULTS
          echo "- 有効なリソース: $TOTAL_VALID" >> $VALIDATION_RESULTS
          echo "- 無効なリソース: $TOTAL_INVALID" >> $VALIDATION_RESULTS
          echo "- エラー: $TOTAL_ERRORS" >> $VALIDATION_RESULTS
          echo "" >> $VALIDATION_RESULTS
          
          if [ $TOTAL_INVALID -gt 0 ] || [ $TOTAL_ERRORS -gt 0 ]; then
            echo "❌ 検証で問題が見つかりました。詳細は上記の結果を確認してください。" >> $VALIDATION_RESULTS
            exit 1
          else
            echo "✅ すべてのマニフェストが検証をパスしました。" >> $VALIDATION_RESULTS
          fi
          
          cat $VALIDATION_RESULTS

      - name: Comment PR with validation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const validationOutput = fs.readFileSync('validation_results.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: validationOutput
            });